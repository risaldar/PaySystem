/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.108
 * Generated at: 2021-06-25 19:40:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.library;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import timeSheet.UtilWeb;
import timeSheet.database.entity.Employee;
import timeSheet.database.entity.GroupRole;
import timeSheet.database.manager.EmployeeManager;
import timeSheet.database.manager.GroupManager;
import timeSheet.util.SHA;
import javax.persistence.PersistenceException;
import java.text.ParseException;
import java.text.SimpleDateFormat;

public final class saveEmployee_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');

    SimpleDateFormat dateFormat = UtilWeb.getDateFormat();
    EmployeeManager manager = new EmployeeManager();
    Employee employee = new Employee();
    int id = Integer.parseInt(request.getParameter(Employee.Field.id.toString()));
    if (id > 0) {
        employee = manager.getEmployee(id);
    } else {
        SHA sha1 = new SHA(request.getParameter(Employee.Field.pass1.toString()));
        String password = sha1.toString();
        employee.setPassword(password);
    }
    employee.setActiveFlag(request.getParameter(Employee.Field.active.toString()) != null);
    employee.setSalary(request.getParameter(Employee.Field.salaried.toString()) != null);
    employee.setPtoAllowed(request.getParameter(Employee.Field.ptoAllowed.toString()) != null);
    employee.setEmailAddress(request.getParameter(Employee.Field.email.toString()));
    employee.setFileNumber(request.getParameter(Employee.Field.fileNum.toString()));
    employee.setName(request.getParameter(Employee.Field.name.toString()));
    employee.setUserName(request.getParameter(Employee.Field.userName.toString()));
    employee.setRole(GroupRole.valueOf(request.getParameter(Employee.Field.role.toString())));
    try {
        employee.setFullTimeDate(dateFormat.parse(request.getParameter(Employee.Field.fullTimeDate.toString())));
        employee.setHireDate(dateFormat.parse(request.getParameter(Employee.Field.dateHired.toString())));
    } catch (ParseException e) {
        e.printStackTrace();
    }
    GroupManager groupManager = new GroupManager();
    employee.setGroup(groupManager.getGroup(Integer.parseInt(request.getParameter(Employee.Field.group.toString()))));

    try {
        manager.saveEmployee(employee);

      out.write("\n");
      out.write("<script type=\"text/javascript\">window.location.replace(\"../manageEmployees.jsp\");</script>\n");

    } catch (PersistenceException e) {
        out.println(e.getMessage());
    }

      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
